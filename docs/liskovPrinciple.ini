id = "liskovPrinciple";
title = "Covariance And Contravariance Are Fatal";
description = "Type mismatch between signatures of the same method in different classes of the same hierarchy used to be a warning. It is not a fatal error, altought it is only checked at execution time, when all the classes are loaded.";
code = "<?php

class Foo {
    public function process(stdClass $item): array{}
}

class SuperFoo extends Foo{
    public function process(array $items): array{}
    //                      ^^^^^ mismatch
}

?>";
before = "PHP Warning:  Declaration of SuperFoo::process(array $items): array should be compatible with Foo::process(stdClass $item): array 

Warning: Declaration of SuperFoo::process(array $items): array should be compatible with Foo::process(stdClass $item): array 
";
after = "PHP Fatal error:  Declaration of SuperFoo::process(array $items): array must be compatible with Foo::process(stdClass $item): array 

Fatal error: Declaration of SuperFoo::process(array $items): array must be compatible with Foo::process(stdClass $item): array 
";
seeAlso[] = "";
deprecation = "";
phpVersion = "8.0";
alternatives[] = "Make sure the types are compatible one with another";
related[] = "";
phpError["Declaration of SuperFoo::process(array $items): array should be compatible with Foo::process(stdClass $item): array"] = "declaration-of-%s-must-be-compatible-with-%s";
keywords[] = "raised error";
features[] = "compatibility";
