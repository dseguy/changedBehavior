id = "NotAClosure";
title = "Not In A Closure";
description = "Calling ``Closure`` native methods outside a closure or an arrow function leads to an error message. 

This applies to functions or methods, that are later turned into a closure with the first class callable syntax: while that syntax creates a closure, the underlying code is not a closure, and cannot access the related features.

The warning message, used in previous PHP version, was not as explicit as the new one.";
code = "<?php

function foo() {
    Closure::getCurrent();
}

foo(); // Error

foo(...)(); // Error: foo was put inside a closure, but it is still not a closure itself.

?>";
before = "PHP Fatal error:  Uncaught Error: Call to undefined method Closure::getCurrent()";
after = "PHP Fatal error:  Uncaught Error: Current function is not a closure
Stack trace:
#0 /codes/NotAClosure.php(4): Closure::getCurrent()
#1 /codes/NotAClosure.php(7): foo()
#2 {main}
  thrown in /codes/NotAClosure.php on line 4

Fatal error: Uncaught Error: Current function is not a closure in /codes/NotAClosure.php:4
Stack trace:
#0 /codes/NotAClosure.php(4): Closure::getCurrent()
#1 /codes/NotAClosure.php(7): foo()
#2 {main}
  thrown in /codes/NotAClosure.php on line 4
";
seeAlso[] = "";
deprecation = "";
phpVersion = "8.5";
alternatives[] = "";
related[] = "";
keywords[] = "";
features[] = "";
phpError["Call to undefined method Closure::getCurrent()"] = "call-to-undefined-method-%s::%s\(\)";
phpError["Current function is not a closure"] = "call-to-undefined-method-%s::%s\(\)";
