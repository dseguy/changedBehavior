id = "returnTypeEnforce";
title = "PHP native return types are now enforced";
description = "PHP provides native interfaces: they include methods and their type. Until PHP 8.1, such types were not enforced, for backward compatibility reasons. Nowadays, these types are enforced, just like any other interface. It makes PHP native interfaces on the same footing as custom interfaces.

In case this migration is too ambitious, it is possible to use the ``#[\\ReturnTypeWillChange]`` to suppress the warning.
";
code = "<?php

class x implements Iterator {

function __construct() {
	print __METHOD__;
}

public function current()  {}
public function key(): mixed {}
public function next(): void {}
public function rewind(): void {}
public function valid(): bool {}
} 

new x; 

?>";
before = "x::__construct";
after = "PHP Deprecated:  Return type of x::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice 

Deprecated: Return type of x::current() should either be compatible with Iterator::current(): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice 
x::__construct";
seeAlso[] = "";
deprecation = "";
phpVersion = "8.1";
alternatives[] = "Add the return types to the implementations of PHP native interfaces.";
alternatives[] = "Use the ReturnTypeWillChange attribute.";
related[] = "";
phpError["Return type of x::current() should either be compatible with Iterator::current(): mixed"] = "return-type-of-%s::%s()-should-either-be-compatible-with-%s::%s():-mixed";
keywords[] = "";
features[] = "return"
features[] = "type"
features[] = "return-type"
features[] = "returntypewillchange"
analyzer[] = ""